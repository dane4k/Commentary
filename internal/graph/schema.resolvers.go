package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"Commentary/internal/graph/model"
	"context"
	"github.com/sirupsen/logrus"
	"sync"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string) (*model.User, error) {
	return r.UserService.CreateUser(ctx, username)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	return r.PostService.CreatePost(ctx, input)
}

// ToggleComments is the resolver for the toggleComments field.
func (r *mutationResolver) ToggleComments(ctx context.Context, postID int) (*model.Post, error) {
	return r.PostService.ToggleComments(ctx, postID)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	return r.CommentService.CreateComment(ctx, input)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	return r.PostService.GetPosts(ctx, limit, offset)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, postID int, limit *int, offset *int) (*model.Post, error) {
	return r.PostService.GetPost(ctx, postID, limit, offset)
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	commentChan := r.broker.Subscribe(postID)
	commentCh := make(chan *model.Comment, 100)

	var mu sync.Mutex

	go func() {
		defer close(commentCh)
		for msg := range commentChan {
			mu.Lock()
			select {
			case commentCh <- msg:
				logrus.Debugf("Sent comment for postID %v", postID)
			case <-ctx.Done():
				logrus.Debugf("Subscription canceled for postID %v", postID)
				mu.Unlock()
				return
			}
			mu.Unlock()
		}
	}()

	go func() {
		<-ctx.Done()
		r.broker.Unsubscribe(postID, commentChan)
		logrus.Debugf("Unsubscribed from postID %v", postID)
	}()

	return commentCh, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
